{
  "db_name": "PostgreSQL",
  "query": "\n        WITH filtered_jobs AS (\n            SELECT\n                DATE(created_at) as job_date,\n                status,\n                execution_time_ms,\n                error_message\n            FROM analysis_jobs\n            WHERE analysis_id = $1 AND created_at >= NOW() - INTERVAL '1 day' * $2\n        ),\n        daily_stats AS (\n            SELECT\n                job_date as date,\n                COUNT(*) as total_runs,\n                COUNT(CASE WHEN status = 'completed' THEN 1 END) as successful_runs,\n                COUNT(CASE WHEN status = 'failed' THEN 1 END) as failed_runs,\n                AVG(CASE WHEN execution_time_ms IS NOT NULL THEN execution_time_ms::float END) as avg_execution_time\n            FROM filtered_jobs\n            GROUP BY job_date\n        ),\n        perf_stats AS (\n            SELECT\n                AVG(CASE WHEN execution_time_ms IS NOT NULL THEN execution_time_ms::float END) as avg_time,\n                MIN(execution_time_ms) as min_time,\n                MAX(execution_time_ms) as max_time,\n                COUNT(*) as total_completed\n            FROM filtered_jobs\n            WHERE status = 'completed'\n        ),\n        error_stats AS (\n            SELECT\n                error_message,\n                COUNT(*) as occurrence_count,\n                ROW_NUMBER() OVER (ORDER BY COUNT(*) DESC) as rn\n            FROM filtered_jobs\n            WHERE status = 'failed' AND error_message IS NOT NULL\n            GROUP BY error_message\n        )\n        SELECT\n            json_agg(json_build_object(\n                'date', ds.date,\n                'total_runs', ds.total_runs,\n                'successful_runs', ds.successful_runs,\n                'failed_runs', ds.failed_runs,\n                'avg_execution_time', ds.avg_execution_time\n            ) ORDER BY ds.date DESC) FILTER (WHERE ds.date IS NOT NULL) as daily_stats,\n            (SELECT row_to_json(ps.*) FROM perf_stats ps) as performance,\n            (SELECT json_agg(json_build_object(\n                'error_message', es.error_message,\n                'occurrence_count', es.occurrence_count\n            )) FROM error_stats es WHERE es.rn <= 10) as top_errors\n        FROM daily_stats ds\n        ",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "daily_stats",
        "type_info": "Json"
      },
      {
        "ordinal": 1,
        "name": "performance",
        "type_info": "Json"
      },
      {
        "ordinal": 2,
        "name": "top_errors",
        "type_info": "Json"
      }
    ],
    "parameters": {
      "Left": [
        "Uuid",
        "Float8"
      ]
    },
    "nullable": [
      null,
      null,
      null
    ]
  },
  "hash": "8f05843e5a2babe592b8c9b0a05bc2bfd607fb7ab578607d07f1eefe63154197"
}
