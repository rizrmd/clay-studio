name: Build and Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-rust:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "./backend -> target"
        cache-all-crates: true
    
    - name: Build backend
      working-directory: ./backend
      run: |
        cargo build --release
        cp target/release/clay-studio-backend ../clay-studio-backend
        cp target/release/mcp_server ../mcp_server
        cp -r migrations ../migrations
    
    - name: Upload backend binary
      uses: actions/upload-artifact@v4
      with:
        name: backend-binary
        path: |
          clay-studio-backend
          mcp_server
          migrations

  build-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest
    
    - name: Cache Bun dependencies
      uses: actions/cache@v4
      with:
        path: ~/.bun
        key: ${{ runner.os }}-bun-${{ hashFiles('frontend/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-
    
    - name: Build frontend
      working-directory: ./frontend
      run: |
        bun install
        bun run build
    
    - name: Upload frontend build
      uses: actions/upload-artifact@v4
      with:
        name: frontend-dist
        path: frontend/dist

  build-docker:
    needs: [build-rust, build-frontend]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Prepare build context
      run: |
        echo "=== Listing artifacts directory structure ==="
        ls -la artifacts/
        echo "=== Listing frontend-dist contents ==="
        ls -la artifacts/frontend-dist/
        echo "=== Moving backend binaries and migrations ==="
        mv artifacts/backend-binary/clay-studio-backend ./
        mv artifacts/backend-binary/mcp_server ./
        mv artifacts/backend-binary/migrations ./
        chmod +x clay-studio-backend
        chmod +x mcp_server
        echo "=== Creating frontend/dist directory ==="
        mkdir -p frontend/dist
        echo "=== Copying frontend dist files ==="
        cp -r artifacts/frontend-dist/* frontend/dist/
        echo "=== Verifying frontend/dist contents ==="
        ls -la frontend/dist/
        echo "=== Done with preparation ===="
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
    
    - name: Create minimal Dockerfile
      run: |
        cat > Dockerfile.minimal << 'EOF'
        FROM debian:trixie-slim
        WORKDIR /app
        
        RUN apt-get update && \
            apt-get install -y --no-install-recommends \
            ca-certificates curl wget git unzip && \
            rm -rf /var/lib/apt/lists/*
        
        # Install Bun
        RUN curl -fsSL https://bun.sh/install | bash && \
            mv /root/.bun/bin/bun /usr/local/bin/ && \
            chmod +x /usr/local/bin/bun
        
        COPY clay-studio-backend /app/clay-studio-backend
        COPY mcp_server /app/mcp_server
        COPY migrations /app/migrations
        COPY frontend/dist /app/frontend/dist
        
        EXPOSE 7680
        WORKDIR /app
        ENV PRODUCTION=true
        CMD ["./clay-studio-backend"]
        EOF
    
    - name: Verify build context
      run: |
        echo "=== Current directory ==="
        pwd
        echo "=== Directory structure ==="
        ls -la
        echo "=== Check binaries and migrations ==="
        ls -la clay-studio-backend mcp_server
        ls -la migrations/
        echo "=== Frontend directory ==="
        ls -la frontend/
        echo "=== Dockerfile.minimal content ==="
        cat Dockerfile.minimal
    
    - name: Build and push Docker image
      run: |
        # Build the Docker image
        docker build -f Dockerfile.minimal -t ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker tag ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} ghcr.io/${{ env.IMAGE_NAME }}:main
        
        # Push if not a PR
        if [ "${{ github.event_name }}" != "pull_request" ]; then
          docker push ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ghcr.io/${{ env.IMAGE_NAME }}:main
        fi